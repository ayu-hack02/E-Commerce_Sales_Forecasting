# -*- coding: utf-8 -*-
"""New_code_a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLGksh_w2aE_kWWtjtBNfAcHYVSR0r4y
"""

#!pip install --upgrade --force-reinstall numpy pandas matplotlib seaborn catboost



import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.ensemble import StackingRegressor
from lightgbm import LGBMRegressor
from catboost import CatBoostRegressor
from xgboost import XGBRegressor

# âœ… Load dataset with robust date parsing
def load_data(file_path):
    data = pd.read_csv(file_path, encoding='ISO-8859-1')

    # Auto-detect mixed date formats
    data['InvoiceDate'] = pd.to_datetime(data['InvoiceDate'], format='mixed', errors='coerce')

    # Drop rows where date parsing failed
    data = data.dropna(subset=['InvoiceDate'])

    data.rename(columns={'InvoiceDate': 'date', 'Quantity': 'sales'}, inplace=True)
    data['date'] = data['date'].dt.date  # Keep only date (remove time)
    return data.sort_values(by='date')

# âœ… Process dataset
def process_data(data):
    daily_sales = data.groupby(['date', 'StockCode']).agg({'sales': 'sum'}).reset_index()
    daily_sales['week'] = pd.to_datetime(daily_sales['date']).dt.to_period('W')
    weekly_sales = daily_sales.groupby(['week', 'StockCode']).agg({'sales': 'sum'}).reset_index()
    weekly_sales['week'] = weekly_sales['week'].apply(lambda x: x.start_time)
    return weekly_sales

# âœ… Feature Engineering
def create_features(data):
    data['year'] = data['week'].dt.year
    data['month'] = data['week'].dt.month
    data['weekofyear'] = data['week'].dt.isocalendar().week
    data['dayofweek'] = data['week'].dt.dayofweek
    data['is_weekend'] = (data['dayofweek'] >= 5).astype(int)

    # Lag & Rolling Features
    data['lag_1'] = data.groupby('StockCode')['sales'].shift(1)
    data['rolling_mean_2'] = data.groupby('StockCode')['sales'].transform(lambda x: x.rolling(2, min_periods=1).mean())

    data.fillna(method='bfill', inplace=True)
    return data

# âœ… Load & Process Data
train_data = load_data('train_data.csv')
weekly_sales = process_data(train_data)
weekly_sales = create_features(weekly_sales)

# âœ… Feature Selection
features = ['year', 'month', 'weekofyear', 'dayofweek', 'is_weekend', 'lag_1', 'rolling_mean_2']
scaler = MinMaxScaler()
weekly_sales[features] = scaler.fit_transform(weekly_sales[features])

# âœ… Train-Test Split
train_size = int(len(weekly_sales) * 0.8)
train, test = weekly_sales.iloc[:train_size], weekly_sales.iloc[train_size:]
X_train, X_test, y_train, y_test = train[features], test[features], train['sales'], test['sales']

# âœ… Train Models
lgbm = LGBMRegressor(n_estimators=300, learning_rate=0.1, subsample=0.8, random_state=42)
catboost = CatBoostRegressor(iterations=300, learning_rate=0.1, depth=6, verbose=0, random_state=42)
xgb = XGBRegressor(n_estimators=300, learning_rate=0.1, max_depth=6, subsample=0.8, random_state=42)

lgbm.fit(X_train, y_train)
catboost.fit(X_train, y_train)
xgb.fit(X_train, y_train)

# âœ… Stacking Model
stacked_model = StackingRegressor(
    estimators=[('lgbm', lgbm), ('catboost', catboost), ('xgb', xgb)],
    final_estimator=LGBMRegressor(n_estimators=100, learning_rate=0.1)
)
stacked_model.fit(X_train, y_train)

# âœ… Make Predictions
stacked_preds = stacked_model.predict(X_test)

# âœ… Evaluation
mae = mean_absolute_error(y_test, stacked_preds)
rmse = np.sqrt(mean_squared_error(y_test, stacked_preds))
r2 = r2_score(y_test, stacked_preds)
accuracy = max(0, (1 - (mae / y_test.mean())) * 100)

print(f"âœ… Optimized Hybrid Model - MAE: {mae:.2f}, RMSE: {rmse:.2f}, RÂ²: {r2:.4f}, Accuracy: {accuracy:.2f}%")

# âœ… User Testing
def predict_sales(stock_code, year, month, weekofyear, dayofweek, is_weekend, lag_1, rolling_mean_2):
    input_data = pd.DataFrame([[year, month, weekofyear, dayofweek, is_weekend, lag_1, rolling_mean_2]], columns=features)
    input_data = scaler.transform(input_data)  # Scale input data
    prediction = stacked_model.predict(input_data)
    return round(prediction[0], 2)

test['predicted_sales'] = stacked_preds
test[['week', 'StockCode', 'sales', 'predicted_sales']].to_csv('predictions.csv', index=False)
print("ðŸ“‚ Predictions saved to predictions.csv")



import joblib

# Save the trained scaler and model
joblib.dump(scaler, "scaler.pkl")
joblib.dump(stacked_model, "stacked_model.pkl")
print("âœ… Model and scaler saved.")
